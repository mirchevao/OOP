#include <iostream>
#include <string.h>

using namespace std;

class PlDrustvo {

private:
    char *ime;
    int turi;
    int clenovi;
public:
    PlDrustvo() {
    }
    PlDrustvo (char *i, int t, int c) {
        ime=new char [strlen(i) + 1];
        strcpy(ime, i);
        turi=t;
        clenovi=c;
    }
    int getClenovi() {
		return clenovi;
    }
    
    PlDrustvo operator + (PlDrustvo const &from) {
		PlDrustvo temp;
		temp.clenovi = clenovi + from.clenovi;
		if (clenovi >= from.clenovi) {
			temp.ime = new char [strlen(ime)+1];
			strcpy(temp.ime, ime);
			temp.turi = turi;
		} 
        else {
			temp.ime = new char [strlen(from.ime)+1];
			strcpy(temp.ime, from.ime);
			temp.turi = from.turi;
		}
		return temp;
	}
 
	bool operator > (const PlDrustvo &from) {
		return (clenovi > from.clenovi);
	}
 
	bool operator < (const PlDrustvo &from) {
		return (clenovi < from.clenovi);
	}
    
    friend ostream& operator << (ostream& output, PlDrustvo& from) {
    	output << "Ime: " << from.ime << " Turi: " << from.turi << " Clenovi: " << from.clenovi << endl;
		return output;
    }
};

void najmnoguClenovi (PlDrustvo *drustva, int n) {
	int max = 0;
	PlDrustvo maxD;
	for (int i=0; i < n; i++) {
		if (drustva[i].getClenovi() > max) {
			max = drustva[i].getClenovi();
			maxD = drustva[i];
		}
	}
	cout << maxD;
}

int main() {
    PlDrustvo drustva[3];
    PlDrustvo pl;
    for (int i=0; i<3; i++) {
        char ime[100];
        int brTuri;
        int brClenovi;
        cin>>ime;
        cin>>brTuri;
        cin>>brClenovi;
        PlDrustvo p(ime,brTuri,brClenovi);
        drustva[i] = p;

    }

    pl = drustva[0] + drustva[1];
    cout<<pl;
	cout << "Najmnogu clenovi ima planinarskoto drustvo: ";
    najmnoguClenovi(drustva, 3);

    return 0;
}