Opened: 145 дена
Жичани инструменти Problem 1 (2 / 6)
Да се креира хиерархиjа на класи за репрезентациjа на жичани инструменти. За потребите на оваа хиерархиjа да се дефинира класа ZicanInstrument од коjа ќе бидат изведени двете класи Mandolina и Violina.

Во класата ZicanInstrument се чуваат податоци за:

името на инструментот (низа од 20 знаци)
броjот на жици
основната цена на инструментот.
За класата Mandolina дополнително се чува неjзината форма (низа од 20 знаци).

За класата Violina дополнително се чува неjзината големина (децимален броj).

За секоjа изведените класи треба да се дефинираат соодветните конструктори и следните методи:

cena() за пресметување на цената на инструментот
основната цена на мандолината се зголемува за 15% доколку таа има форма во Неаполитански стил (вредноста на променливата форма е “Neapolitan”)
основната цена на виолината се зголемува за 10% ако неjзината големина има вредност 1/4 (0.25), односно за 20% ако неjзината големина има вредност 1 (1.00)
проптоварување на операторот ==, коj ги споредува жичаните инструменти според броjот на жици што го имаат
преоптоварување на операторот << за печатење на сите податоци за жичаните инструменти.
Да се напише функциjа pecatiInstrumenti(ZicanInstrument &zi, ZicanInstrument **i, int n) коjа на влез прима жичан инструмент, низа од покажувачи кон жичани инструменти и броj на елементи во низата. Функциjата jа печати цената на сите жичани инструменти од низата кои имаат ист броj на жици како и инструментот проследен како прв аргумент на функциjата.


//Vasiot kod ovde:
#include<iostream>
#include<cstring>

using namespace std;

class ZicanInstrument {
protected:
    char ime[20];
    int br_zici;
    float cena;
public:
    ZicanInstrument( const char *ime="", int br_zici=0, float cena=0) {
        strcpy(this->ime, ime);
        this->br_zici = br_zici;
        this->cena = cena;
    }
    virtual float Cena() = 0;
    virtual ~ZicanInstrument(){}
    int getbr_zici () { return br_zici; }
    char *getIme()  { return ime; }
    float getcena() { return cena; }
    bool operator==(ZicanInstrument &a)
{
    if(a.br_zici==br_zici) return true;
    else return false;
}
};
class Mandolina : public ZicanInstrument {
private:
    char forma[20];
public:
    Mandolina(const char *ime="", int br_zici=0, float cena=0, const char *forma="") : ZicanInstrument(ime, br_zici, cena) {
        strcpy(this->forma, forma);
    }
    float Cena () {
        if(strcmp(forma, "Neapolitan")==0) {
            return cena+cena*0.15;
        }
        else return cena;
        
    }
    char *getforma() {return forma;}
    friend ostream& operator<<(ostream &o, Mandolina &z) {
        o<<z.getIme()<<" "<<z.getbr_zici()<<" "<<z.getcena()<<z.getforma()<<endl;
        return o;
    }
    ~Mandolina(){}
};
class Violina : public ZicanInstrument {
private:
    double golemina;
public:
    Violina(char *ime, int br_zici, float cena, double golemina) : ZicanInstrument(ime, br_zici, cena) {
        this->golemina = golemina;
    }
    float Cena () {
        if(golemina == 0.25) {
           return  cena+cena*0.1;

        }
        else if(golemina == 1.00) {
            return cena+cena*0.2;
        }
        else return cena;
        
    }
    ~Violina(){}
    double getgolemina() { return golemina; }
    friend ostream& operator<<(ostream &o, Violina &z) {
        o<<z.getIme()<<" "<<z.getbr_zici()<<" "<<z.getcena()<<z.getgolemina()<<endl;
        return o;
    }
};
void pecatiInstrumenti(ZicanInstrument &zi, ZicanInstrument **i, int n) {
    for(int k=0; k<n; k++)
    {
        if(zi == *(i[k]))
            cout<<i[k]->Cena()<<endl;
    }
}
   
    

int main() {
	char ime[20];
	int brojZici;
	float cena;
	char forma[20];
	cin >> ime >> brojZici >> cena >> forma;
	Mandolina m(ime, brojZici, cena, forma);
	int n;
	cin >> n;
	ZicanInstrument **zi = new ZicanInstrument*[2 * n];
	for(int i = 0; i < n; ++i) {
		cin >> ime >> brojZici >> cena >> forma;
		zi[i] = new Mandolina(ime, brojZici, cena, forma);
	}
	for(int i = 0; i < n; ++i) {
		float golemina;
		cin >> ime >> brojZici >> cena >> golemina;
		zi[n + i] = new Violina(ime, brojZici, cena, golemina);
	}
	pecatiInstrumenti(m, zi, 2 * n);
	for(int i = 0; i < 2 * n; ++i) {
		delete zi[i];
	}
	delete [] zi;
	return 0;
}