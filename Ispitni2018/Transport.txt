Транспорт Problem 1 (0 / 0)
Туристичка агенција нуди различни понуди за транспорт на патници. За секоја понуда се чуваат податоци за дестинацијата (низа од знаци), основна цена (цел број) и податок за растојанието до дестинацијата изразено во km (цел број).

Од класата Transport да се изведат класите AvtomobilTransport и KombeTransport за моделирање на понудите за транспорт кои нудат транспорт со автомобил или комбе, соодветно. За секоја понуда за транспорт со автомобил се чува податок за тоа дали во понудата има платен шофер (булова променлива), а за транспорт со комбе бројот на луѓе кои може да се превезат во комбето (цел број). (5 поени)

За секој објект од двете изведени класи треба да бидат на располагање следниве методи:

конструктор со аргументи што одговараат на податочните членови и set и get методи за податочните членови (5 поени)
метод cenaTransport, за пресметување на цената на понудата на следниот начин:
За транспорт со автомобил - основната цена се зголемува за 20% ако има платен шофер
За транспорт со комбе - основната цена ќе се намали зависно од бројот на патници во комбето. За секој патник во комбето цената се намалува за 200 (10 поени)
преоптоварен оператор < за споредба на две понуди за транспорт на патник според растојанието до дестинацијата. (5 поени)
Да се имплементира функција pecatiPoloshiPonudi што на влез прима низа од понуди за транспорт на патник, бројот на елементите од низата и една понуда T. Функцијата ја печати дестинацијата, растојанието до дестинацијата и цената за понудите од низата кои се поскапи од понудата T сортирани во растечки редослед по растојанието до дестинацијата (погледни го повикот на функцијата) (10 поени)

Комплетна функционалност на кодот (5 поени)

// вашиот код треба да биде тука
#include<iostream>
#include<cstring>
using namespace std;

class Transport {
	protected:
    char destination[100];
    int price;
    int distance;
    public:
    Transport(char *destination, int price, int distance) {
    	strcpy(this->destitnation, destination);
        this->price = price;
        this->distance = distance;
    }
    void setDestination(char *destination) {
    	strcpy(this->destination, destination);
    }
    void setPrice(int price) {
    	this->price = price;
    }
    void setDistance(int distance) {
    	this->distance = distance;
    }
    char *getDestination() {
    	return destination;
    }
    int getPrice(){
    	return price;
    }
    int getDistance() {
    	return distance;
    }
    virtual int cenaTransport () = 0;
    
};
class AvtomobilTransport : public Transport {
	private:
    bool paid;
    public:
    AvtomobilTransport(char *destination, int price, int distance, bool paid) : Transport(destination, price, distance) {
    	this->paid = paid;
    }
    void setPaid(bool paid) {
    	this->paid = paid;
    }
    bool getPaid() {
    	return paid;
    }
    int cenaTransport() {
    	if(paid)
            return getPrice()*0.02;
        else return getPrice();
    }
    
};
class KombeTransport : public Transport {
	private:
    int people;
    public:
    KombeTransport(char *destination, int price, int distance, int people) : Transport(destination, price, distance)
    {
        this->people = people;
    }
    void getPeople(int people) {
    	this->people = people;
    }
    int getPeople() {
    	return people;
    }
    int cenaTransport() {
        int tmp = getPrice();
    	for(int i = people; i>0; i--)
            tmp=getPrice()-200;
        return tmp;
    }
};
bool operator<(const Transport &t1, const Transport &t2){
    char tmp1, tmp2;
    tmp1 = strlen(t1.getDestination());
    tmp2 = strlen(t2.getDestination());
	return(t1.getDistance()<t2.getDistance()&&tmp1<tmp2);
}
int main(){

char destinacija[20];
int tip,cena,rastojanie,lugje;
bool shofer;
int n;
cin>>n;
Transport  **ponudi;
ponudi=new Transport *[n];

for (int i=0;i<n;i++){

    cin>>tip>>destinacija>>cena>>rastojanie;
    if (tip==1) {
        cin>>shofer;
        ponudi[i]=new AvtomobilTransport(destinacija,cena,rastojanie,shofer);

    }
    else {
        cin>>lugje;
        ponudi[i]=new KombeTransport(destinacija,cena,rastojanie,lugje);
    }


}

AvtomobilTransport nov("Ohrid",2000,600,false);
pecatiPoloshiPonudi(ponudi,n,nov);

for (int i=0;i<n;i++) delete ponudi[i];
delete [] ponudi;
return 0;
}
