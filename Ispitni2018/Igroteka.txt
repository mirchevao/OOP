Opened: 145 дена
Игротека Problem 1 (1 / 5)
Во една игротека има 2 типа играчки: топки и коцки. Коцките и топките се опишани со параметри како што се:

боја (char *)
густина (int).
Дополнително за топките се знае и радиусот (int), додека за коцките целосните димензии (висина, ширина и длабочина – int).

За секоја од класите треба да се дефинираат методи getMasa() и getVolumen(). Масата на играчката се пресметува како производ од волуменот и густината на играчката. За PI користете ја вредноста 3.14.

Во функцијата main да се декларира променлива kupche што претставува динамички алоцирана низа кон Igrachka. Во зависност од првиот влезен параметар се внесуваат објекти од класите Topka или Kocka (1 - се внесува топка, 2 - се внесува коцка).

Од тастатура да се внесат податоци за коцката на Петра Kocka petra. Во главната функција во да се отпечатат:

Да се отпечати DA ако вкупната маса на сите играчки е поголема од масата на играчката на Петра, а NE во спротивно.
Разликата по апсолутна вредност на волуменот на играчката со максимален волумен во купчето и волуменот на коцката на Петра. Форматот е:

Razlikata e: {razlika}

Задачата да се реши со тоа што класите Kocka и Topka ќе наследуваат од класите Forma и Igrachka.

Дополнителни барања:

Во класата Igrachka да се додаде уште една чисто виртуелна функција float getPlostina(). Истата да се имплементира во класите Kocka и Topka
Во главната функција, дополнително да се испечати и: Разликата по апсолутна вредност на плоштината на играчката со минимална плоштина во кучето и плоштината на коцката на Петра во истиот формат како и второто барање погоре.



#include<iostream>
#include<cstring>
#include<cmath>
using namespace std;
class Igrachka {
public:
    virtual float getVolumen() = 0;
    virtual float getMasa() = 0;
    //дополнително барање 1
    virtual float getPlostina() = 0;
    virtual ~Igrachka(){}
};

class Forma {
protected:
    char boja[100];
    int gustina;
public:
    // да се имплементираат потребните методи
    Forma(const char *boja="", int gustina = 0) {
    	strcpy(this->boja, boja);
        this->gustina = gustina;
    }
    char *getBoja() {
    	return boja;
    }
    int getGustina()  {
    	return gustina;
    }
};

class Topka : public Igrachka, public Forma {
	private:
    int radius;
    public:
    Topka(char *boja, int gustina, int radius) : Forma(boja, gustina ) {
    	this->radius = radius;
    }
    int getRadius() {
    	return radius;
    }
   	 float getVolumen()
    {
        return 4./3*3.14*pow(radius,3);
    }
    float getMasa()
    {
        return 4./3*3.14*pow(radius,3)*gustina;
    }
    float getPlostina()
    {
    	return 4*3.14*pow(radius,2);
    }
    
    int getType() {
    	return 1;
    }
    ~Topka(){}
};
class Kocka : public Igrachka, public Forma {
	private:
    int visina, sirina, dlabocina;
    public:
    Kocka(char *boja, int gustina, int visina, int sirina, int dlabocina) : Forma(boja, gustina) {
    	this->visina = visina;
        this->sirina = sirina;
        this->dlabocina = dlabocina;
    }
    ~Kocka(){}  
    float getVolumen()
    {
        return visina*sirina*dlabocina;
    }
    float getMasa()
    {
        return getVolumen() * gustina;
    }
    float getPlostina()
    {
    	return 2*(visina*sirina+visina*dlabocina+sirina*dlabocina);
    }
    int getType() {
    	return 2;
    }
};
float checkVolume(Igrachka **kupche, int n)
{
    float max=kupche[0]->getVolumen();
    for(int i=1; i<n; i++)
    {
        if(kupche[i]->getVolumen()>max)
        {
            max=kupche[i]->getVolumen();
        }
    }
    return max;
}
float checkP(Igrachka **kupche, int n)
{
    float min=kupche[0]->getPlostina();
    for(int i=1; i<n; i++)
    {
        if(kupche[i]->getPlostina()<min)
        {
            min=kupche[i]->getPlostina();
        }
    }
    return min;
}
void checkMass(float massPetra, Igrachka **kupche, int n)
{
    float total=0;
    for(int i=0; i<n; i++)
    {
        total+=kupche[i]->getMasa();
    }
    if(total>massPetra)
    {
        cout<<"DA"<<endl;
    }
    else
    {
        cout<<"NE"<<endl;
    }
}


int main(){
	//vnesi informacii za kupche
    int n;
    cin>>n;
	Igrachka **kupche = new Igrachka*[n];
    int a, b, c, r, gus, type;
    char boj[50];
    for(int i = 0; i<n; ++i ) {
        cin>>type;
        if(type==1) {
        	cin>>boj>>gus>>r;
            kupche[i] = new Topka(boj, gus, r);
            
        }
        if(type==2) {
        	cin>>boj>>gus>>a>>b>>c;
            kupche[i] = new Kocka(boj, gus, a, b, c);
        }
    }
    //vnesi informacii za igrachkata na Petra
    cin>>boj>>gus>>a>>b>>c;
    Kocka petra(boj, gus, a, b, c);
    
	checkMass(petra.getMasa(), kupche, n);
    checkVolume(kupche, n);
    //дополнително барање 2
    cout<<"Razlikata e: "<<abs(petra.getVolumen()-checkVolume(kupche, n))<<endl;
    cout<<"Razlikata e: "<<abs(petra.getPlostina()-checkP(kupche, n))<<endl;
    for(int i=0; i<n; i++)
    {
        delete kupche[i];
    }
    delete [] kupche;
    

	return 0;
}